Traceback (most recent call last):
  File "c:\users\aaron\miniconda37\lib\site-packages\jupyter_cache\executors\utils.py", line 56, in single_nb_execution
    record_timing=False,
  File "c:\users\aaron\miniconda37\lib\site-packages\nbclient\client.py", line 1087, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "c:\users\aaron\miniconda37\lib\site-packages\nbclient\util.py", line 74, in wrapped
    return just_run(coro(*args, **kwargs))
  File "c:\users\aaron\miniconda37\lib\site-packages\nbclient\util.py", line 53, in just_run
    return loop.run_until_complete(coro)
  File "c:\users\aaron\miniconda37\lib\asyncio\base_events.py", line 587, in run_until_complete
    return future.result()
  File "c:\users\aaron\miniconda37\lib\site-packages\nbclient\client.py", line 541, in async_execute
    cell, index, execution_count=self.code_cells_executed + 1
  File "c:\users\aaron\miniconda37\lib\site-packages\nbclient\client.py", line 832, in async_execute_cell
    self._check_raise_for_error(cell, exec_reply)
  File "c:\users\aaron\miniconda37\lib\site-packages\nbclient\client.py", line 740, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply['content'])
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
# %load class_bank.py
# filename:class_bank.py (in chap3)
# function: using the class and _init_ and some method to process the bank operation
# _init_: the purpose of the self is that it refers to the specific object created from class like Account class

class Account:
  def __init__(self, acct_number, name):
    print("\t_init_ contstructor is processing")
    self.acct_number = acct_number
    self.name = name
    self.balance = 100

  def deposit(self, amount):
    print("Deposit amount is ", amount)
    if amount <= 0:
      raise ValueError('should be positive amount')
    self.balance += amount

  def withdraw(self, amount):
    print("Withdraw amount is ", amount)
    if amount <= self.balance:
      self.balance -= amount
    else:
      raise RuntimeError('Your account balance is not enough!!!')

# when you use your ATM card to withdraw momey,you must pass the password first
# the while loop is used to check the password


while True:
  print("\nPlease key in your Card password!!!")
  passwrd = input()
  if passwrd == "222222":
    acct1 = Account("0081038000111", 'Johnny Hsu')
    break
  else:
    continue
print("your current balance of card is:", acct1.balance)

print("\n start to prcocess the class object acct1")
deposit1 = acct1.deposit
withdraw1 = acct1.withdraw
acct1.deposit(2000)
deposit1(10000)
withdraw1(5000)
print("the bank balaance is ", acct1.balance)

print("\n start to prcocess the class object acct2")
acct2 = Account('00810380000222', 'Sean Pan ')
deposit2 = acct2.deposit
withdraw2 = acct2.withdraw
deposit2(3000)
withdraw2(2000)
print("the bank balance is ", acct2.balance)
------------------

[1;31m-------------------------------------------------------------------------[0m
[1;31mStdinNotImplementedError[0m                Traceback (most recent call last)
[1;32m<ipython-input-2-7a4c508eb6f1>[0m in [0;36m<module>[1;34m[0m
[0;32m     30[0m [1;32mwhile[0m [1;32mTrue[0m[1;33m:[0m[1;33m[0m[1;33m[0m[0m
[0;32m     31[0m   [0mprint[0m[1;33m([0m[1;34m"\nPlease key in your Card password!!!"[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[1;32m---> 32[1;33m   [0mpasswrd[0m [1;33m=[0m [0minput[0m[1;33m([0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[0m[0;32m     33[0m   [1;32mif[0m [0mpasswrd[0m [1;33m==[0m [1;34m"222222"[0m[1;33m:[0m[1;33m[0m[1;33m[0m[0m
[0;32m     34[0m     [0macct1[0m [1;33m=[0m [0mAccount[0m[1;33m([0m[1;34m"0081038000111"[0m[1;33m,[0m [1;34m'Johnny Hsu'[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m

[1;32mc:\users\aaron\miniconda37\lib\site-packages\ipykernel\kernelbase.py[0m in [0;36mraw_input[1;34m(self, prompt)[0m
[0;32m    853[0m         [1;32mif[0m [1;32mnot[0m [0mself[0m[1;33m.[0m[0m_allow_stdin[0m[1;33m:[0m[1;33m[0m[1;33m[0m[0m
[0;32m    854[0m             raise StdinNotImplementedError(
[1;32m--> 855[1;33m                 [1;34m"raw_input was called, but this frontend does not support input requests."[0m[1;33m[0m[1;33m[0m[0m
[0m[0;32m    856[0m             )
[0;32m    857[0m         return self._input_request(str(prompt),

[1;31mStdinNotImplementedError[0m: raw_input was called, but this frontend does not support input requests.
StdinNotImplementedError: raw_input was called, but this frontend does not support input requests.

